import { app } from '../index';
import Joi from 'joi';
import type { ValidationResult } from 'joi';

// Types
import type { Request, Response } from 'express';

export type Position = {
  id: number,
  name: string,
};

const positions = [
  { id: 1, name: "Director" },
  { id: 2, name: "Medic" },
  { id: 3, name: "Admin" },
];

app.get('/api/position', async (req, res) => {
  // const result = await query('SELECT * FROM positions');
  // res.send(result);

  // function query(sql: string) {
  //   return new Promise((resolve, reject) => {
  //     db.query(sql, (err, results, fields) => {
  //       if (results) resolve(results);
  //       reject();
  //     });
  //   })
  // }
});

app.get('/api/position/:id', (req: Request, res: Response) => {
  const id = parseInt(req.params.id);
  const position = positions.find(pos => pos.id == id);

  if (!position) {
    res
      .status(404)
      .send("The position with the given ID was not found");
    return;
  }

  res.status(200).send(position);
})

app.post('/api/position', (req: Request, res: Response) => {
  const { name } = req.body;
  const id = positions.length + 1;

  // Validation
  const { error } = validatePosition(req.body);

  if (error) {
    res.status(400).send(error.details[0].message);
    return;
  }

  const position = { id, name };
  positions.push(position);
  res.send(position);
});


app.put('/api/position/:id', (req: Request, res: Response): void => {
  // Look up the object
  // If not existing, return 404
  const id = parseInt(req.params.id);
  const position = positions.find(pos => pos.id == id);
  if (!position) {
    res.status(404).send('The position with the given ID was not found');
    return;
  }

  // Validate
  
  const { error } = validatePosition(position);

  // If invalid, return 400 - Bad request
  if (error) {
    res.status(400).send(error.details[0].message);
    return;
  }

  // Update course
  Object.assign(position, req.body);
  console.log(positions);
  res.send(position);
}); 

app.delete('/api/position/:id', (req: Request, res: Response): void => {
  const id = parseInt(req.params.id);
  const index = positions.findIndex(pos => pos.id == id);
  const position = positions[index]
  if (index == -1) {
    res.status(404).send('The position with the given ID was not found');
    return;
  }
  positions.splice(index, 1);
  res.send(position);
})

function validatePosition(position: Position): ValidationResult {
  const schema = Joi.object({
    name: Joi.string().min(3).required(),
  });
  return schema.validate(position);
}
